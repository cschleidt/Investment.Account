/*
 * Investment Account
 *
 * This service domain handles the non-cash holdings positions for a customer, covering multiple instruments as necessary
 *
 * OpenAPI spec version: 11.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// The product features/services available with a financical facility
    /// </summary>
    [DataContract]
    public partial class CorporateAction : IEquatable<CorporateAction>
    { 
        /// <summary>
        /// The type of corporate action that can be applied
        /// </summary>
        /// <value>The type of corporate action that can be applied</value>

        [DataMember(Name="CorporateActionType")]
        public string CorporateActionType { get; set; }

        /// <summary>
        /// The processing schedule for applying the type of corporate action to the investment account
        /// </summary>
        /// <value>The processing schedule for applying the type of corporate action to the investment account</value>

        [DataMember(Name="CorporateActionApplicationSchedule")]
        public string CorporateActionApplicationSchedule { get; set; }

        /// <summary>
        /// The instrument type that the corporate action impacts (will be one that the investment account tracks)
        /// </summary>
        /// <value>The instrument type that the corporate action impacts (will be one that the investment account tracks)</value>

        [DataMember(Name="CorporateActionInstrumentType")]
        public string? CorporateActionInstrumentType { get; set; }

        /// <summary>
        /// Details of the transaction and its impact on the securities holding in the investment account
        /// </summary>
        /// <value>Details of the transaction and its impact on the securities holding in the investment account</value>

        [DataMember(Name="CorporateActionTransaction")]
        public string? CorporateActionTransaction { get; set; }

        /// <summary>
        /// The type of corporate action applied to the securities holdings
        /// </summary>
        /// <value>The type of corporate action applied to the securities holdings</value>

        [DataMember(Name="CorporateActionTransactionType")]
        public string? CorporateActionTransactionType { get; set; }

        /// <summary>
        /// Details describing the purpose and impact of processing the action
        /// </summary>
        /// <value>Details describing the purpose and impact of processing the action</value>

        [DataMember(Name="CorporateActionTransactionDescription")]
        public string? CorporateActionTransactionDescription { get; set; }

        /// <summary>
        /// File of consolidated notes, forms and documents for the corporate action
        /// </summary>
        /// <value>File of consolidated notes, forms and documents for the corporate action</value>

        [DataMember(Name="CorporateActionWorkProducts")]
        public string? CorporateActionWorkProducts { get; set; }

        /// <summary>
        /// Reference to associated documents
        /// </summary>
        /// <value>Reference to associated documents</value>

        [DataMember(Name="DocumentDirectoryEntryInstanceReference")]
        public string? DocumentDirectoryEntryInstanceReference { get; set; }

        /// <summary>
        /// The outcome of applying the action to the account (can be simple confirmation)
        /// </summary>
        /// <value>The outcome of applying the action to the account (can be simple confirmation)</value>

        [DataMember(Name="CorporateActionTransactionResult")]
        public string? CorporateActionTransactionResult { get; set; }

        /// <summary>
        /// Gets or Sets CorporateActionTransactionDate
        /// </summary>

        [DataMember(Name="CorporateActionTransactionDate")]
        public DateTime? CorporateActionTransactionDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CorporateAction {\n");
            sb.Append("  CorporateActionType: ").Append(CorporateActionType).Append("\n");
            sb.Append("  CorporateActionApplicationSchedule: ").Append(CorporateActionApplicationSchedule).Append("\n");
            sb.Append("  CorporateActionInstrumentType: ").Append(CorporateActionInstrumentType).Append("\n");
            sb.Append("  CorporateActionTransaction: ").Append(CorporateActionTransaction).Append("\n");
            sb.Append("  CorporateActionTransactionType: ").Append(CorporateActionTransactionType).Append("\n");
            sb.Append("  CorporateActionTransactionDescription: ").Append(CorporateActionTransactionDescription).Append("\n");
            sb.Append("  CorporateActionWorkProducts: ").Append(CorporateActionWorkProducts).Append("\n");
            sb.Append("  DocumentDirectoryEntryInstanceReference: ").Append(DocumentDirectoryEntryInstanceReference).Append("\n");
            sb.Append("  CorporateActionTransactionResult: ").Append(CorporateActionTransactionResult).Append("\n");
            sb.Append("  CorporateActionTransactionDate: ").Append(CorporateActionTransactionDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return "";
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CorporateAction)obj);
        }

        /// <summary>
        /// Returns true if CorporateAction instances are equal
        /// </summary>
        /// <param name="other">Instance of CorporateAction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CorporateAction other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CorporateActionType == other.CorporateActionType ||
                    CorporateActionType != null &&
                    CorporateActionType.Equals(other.CorporateActionType)
                ) && 
                (
                    CorporateActionApplicationSchedule == other.CorporateActionApplicationSchedule ||
                    CorporateActionApplicationSchedule != null &&
                    CorporateActionApplicationSchedule.Equals(other.CorporateActionApplicationSchedule)
                ) && 
                (
                    CorporateActionInstrumentType == other.CorporateActionInstrumentType ||
                    CorporateActionInstrumentType != null &&
                    CorporateActionInstrumentType.Equals(other.CorporateActionInstrumentType)
                ) && 
                (
                    CorporateActionTransaction == other.CorporateActionTransaction ||
                    CorporateActionTransaction != null &&
                    CorporateActionTransaction.Equals(other.CorporateActionTransaction)
                ) && 
                (
                    CorporateActionTransactionType == other.CorporateActionTransactionType ||
                    CorporateActionTransactionType != null &&
                    CorporateActionTransactionType.Equals(other.CorporateActionTransactionType)
                ) && 
                (
                    CorporateActionTransactionDescription == other.CorporateActionTransactionDescription ||
                    CorporateActionTransactionDescription != null &&
                    CorporateActionTransactionDescription.Equals(other.CorporateActionTransactionDescription)
                ) && 
                (
                    CorporateActionWorkProducts == other.CorporateActionWorkProducts ||
                    CorporateActionWorkProducts != null &&
                    CorporateActionWorkProducts.Equals(other.CorporateActionWorkProducts)
                ) && 
                (
                    DocumentDirectoryEntryInstanceReference == other.DocumentDirectoryEntryInstanceReference ||
                    DocumentDirectoryEntryInstanceReference != null &&
                    DocumentDirectoryEntryInstanceReference.Equals(other.DocumentDirectoryEntryInstanceReference)
                ) && 
                (
                    CorporateActionTransactionResult == other.CorporateActionTransactionResult ||
                    CorporateActionTransactionResult != null &&
                    CorporateActionTransactionResult.Equals(other.CorporateActionTransactionResult)
                ) && 
                (
                    CorporateActionTransactionDate == other.CorporateActionTransactionDate ||
                    CorporateActionTransactionDate != null &&
                    CorporateActionTransactionDate.Equals(other.CorporateActionTransactionDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CorporateActionType != null)
                    hashCode = hashCode * 59 + CorporateActionType.GetHashCode();
                    if (CorporateActionApplicationSchedule != null)
                    hashCode = hashCode * 59 + CorporateActionApplicationSchedule.GetHashCode();
                    if (CorporateActionInstrumentType != null)
                    hashCode = hashCode * 59 + CorporateActionInstrumentType.GetHashCode();
                    if (CorporateActionTransaction != null)
                    hashCode = hashCode * 59 + CorporateActionTransaction.GetHashCode();
                    if (CorporateActionTransactionType != null)
                    hashCode = hashCode * 59 + CorporateActionTransactionType.GetHashCode();
                    if (CorporateActionTransactionDescription != null)
                    hashCode = hashCode * 59 + CorporateActionTransactionDescription.GetHashCode();
                    if (CorporateActionWorkProducts != null)
                    hashCode = hashCode * 59 + CorporateActionWorkProducts.GetHashCode();
                    if (DocumentDirectoryEntryInstanceReference != null)
                    hashCode = hashCode * 59 + DocumentDirectoryEntryInstanceReference.GetHashCode();
                    if (CorporateActionTransactionResult != null)
                    hashCode = hashCode * 59 + CorporateActionTransactionResult.GetHashCode();
                    if (CorporateActionTransactionDate != null)
                    hashCode = hashCode * 59 + CorporateActionTransactionDate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CorporateAction left, CorporateAction right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CorporateAction left, CorporateAction right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
