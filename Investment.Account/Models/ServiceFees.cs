/*
 * Investment Account
 *
 * This service domain handles the non-cash holdings positions for a customer, covering multiple instruments as necessary
 *
 * OpenAPI spec version: 11.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Investment.Account.Models
{ 
    /// <summary>
    /// The product features/services available with a financical facility
    /// </summary>
    [DataContract]
    public partial class ServiceFees : IEquatable<ServiceFees>
    { 
        /// <summary>
        /// The profile of applicable fees and penalties
        /// </summary>
        /// <value>The profile of applicable fees and penalties</value>

        [DataMember(Name="FeeConfigurationProfile")]
        public string FeeConfigurationProfile { get; set; }

        /// <summary>
        /// Definition of the fee or penalty including when and how to apply
        /// </summary>
        /// <value>Definition of the fee or penalty including when and how to apply</value>

        [DataMember(Name="FeeDefinition")]
        public string FeeDefinition { get; set; }

        /// <summary>
        /// The fee or penalty type applied
        /// </summary>
        /// <value>The fee or penalty type applied</value>

        [DataMember(Name="FeeType")]
        public string FeeType { get; set; }

        /// <summary>
        /// The record of applied fees and penalties including transactions and accrued amounts
        /// </summary>
        /// <value>The record of applied fees and penalties including transactions and accrued amounts</value>

        [DataMember(Name="FeeApplicationRecord")]
        public string FeeApplicationRecord { get; set; }

        /// <summary>
        /// A record of an applied fee or penalty
        /// </summary>
        /// <value>A record of an applied fee or penalty</value>

        [DataMember(Name="FeeTransaction")]
        public string FeeTransaction { get; set; }

        /// <summary>
        /// General description of the fee or penalty transaction
        /// </summary>
        /// <value>General description of the fee or penalty transaction</value>

        [DataMember(Name="TransactionDescription")]
        public string TransactionDescription { get; set; }

        /// <summary>
        /// The fee or penalty type applied
        /// </summary>
        /// <value>The fee or penalty type applied</value>

        [DataMember(Name="TransactionFeeType")]
        public string TransactionFeeType { get; set; }

        /// <summary>
        /// The derived fee or penalty amount applied
        /// </summary>
        /// <value>The derived fee or penalty amount applied</value>

        [DataMember(Name="TransactionFeeCharge")]
        public string TransactionFeeCharge { get; set; }

        /// <summary>
        /// Reference to the payment order raised to apply the fees (will move funds to/from the appropriate accounts)
        /// </summary>
        /// <value>Reference to the payment order raised to apply the fees (will move funds to/from the appropriate accounts)</value>

        [DataMember(Name="PaymentOrderProcedureInstanceReference")]
        public string PaymentOrderProcedureInstanceReference { get; set; }

        /// <summary>
        /// A record of projected fees and penalties
        /// </summary>
        /// <value>A record of projected fees and penalties</value>

        [DataMember(Name="FeeProjectionsandCommitments")]
        public string FeeProjectionsandCommitments { get; set; }

        /// <summary>
        /// General description of the projected fee or penalty
        /// </summary>
        /// <value>General description of the projected fee or penalty</value>

        [DataMember(Name="ProjectedTransactionDescription")]
        public string ProjectedTransactionDescription { get; set; }

        /// <summary>
        /// The fee or penalty type
        /// </summary>
        /// <value>The fee or penalty type</value>

        [DataMember(Name="ProjectedTransactionFeeType")]
        public string ProjectedTransactionFeeType { get; set; }

        /// <summary>
        /// The anticipated fee or penalty amount
        /// </summary>
        /// <value>The anticipated fee or penalty amount</value>

        [DataMember(Name="ProjectedTransactionFeeCharge")]
        public string ProjectedTransactionFeeCharge { get; set; }

        /// <summary>
        /// Gets or Sets FeeAccrualAmount
        /// </summary>

        [DataMember(Name="FeeAccrualAmount")]
        public Amount FeeAccrualAmount { get; set; }

        /// <summary>
        /// The fee or penalty type being tracked
        /// </summary>
        /// <value>The fee or penalty type being tracked</value>

        [DataMember(Name="AccrualFeeType")]
        public string AccrualFeeType { get; set; }

        /// <summary>
        /// The accrued amount of fees and penalties
        /// </summary>
        /// <value>The accrued amount of fees and penalties</value>

        [DataMember(Name="AccrualFeeCharge")]
        public string AccrualFeeCharge { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServiceFees {\n");
            sb.Append("  FeeConfigurationProfile: ").Append(FeeConfigurationProfile).Append("\n");
            sb.Append("  FeeDefinition: ").Append(FeeDefinition).Append("\n");
            sb.Append("  FeeType: ").Append(FeeType).Append("\n");
            sb.Append("  FeeApplicationRecord: ").Append(FeeApplicationRecord).Append("\n");
            sb.Append("  FeeTransaction: ").Append(FeeTransaction).Append("\n");
            sb.Append("  TransactionDescription: ").Append(TransactionDescription).Append("\n");
            sb.Append("  TransactionFeeType: ").Append(TransactionFeeType).Append("\n");
            sb.Append("  TransactionFeeCharge: ").Append(TransactionFeeCharge).Append("\n");
            sb.Append("  PaymentOrderProcedureInstanceReference: ").Append(PaymentOrderProcedureInstanceReference).Append("\n");
            sb.Append("  FeeProjectionsandCommitments: ").Append(FeeProjectionsandCommitments).Append("\n");
            sb.Append("  ProjectedTransactionDescription: ").Append(ProjectedTransactionDescription).Append("\n");
            sb.Append("  ProjectedTransactionFeeType: ").Append(ProjectedTransactionFeeType).Append("\n");
            sb.Append("  ProjectedTransactionFeeCharge: ").Append(ProjectedTransactionFeeCharge).Append("\n");
            sb.Append("  FeeAccrualAmount: ").Append(FeeAccrualAmount).Append("\n");
            sb.Append("  AccrualFeeType: ").Append(AccrualFeeType).Append("\n");
            sb.Append("  AccrualFeeCharge: ").Append(AccrualFeeCharge).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ServiceFees)obj);
        }

        /// <summary>
        /// Returns true if ServiceFees instances are equal
        /// </summary>
        /// <param name="other">Instance of ServiceFees to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceFees other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FeeConfigurationProfile == other.FeeConfigurationProfile ||
                    FeeConfigurationProfile != null &&
                    FeeConfigurationProfile.Equals(other.FeeConfigurationProfile)
                ) && 
                (
                    FeeDefinition == other.FeeDefinition ||
                    FeeDefinition != null &&
                    FeeDefinition.Equals(other.FeeDefinition)
                ) && 
                (
                    FeeType == other.FeeType ||
                    FeeType != null &&
                    FeeType.Equals(other.FeeType)
                ) && 
                (
                    FeeApplicationRecord == other.FeeApplicationRecord ||
                    FeeApplicationRecord != null &&
                    FeeApplicationRecord.Equals(other.FeeApplicationRecord)
                ) && 
                (
                    FeeTransaction == other.FeeTransaction ||
                    FeeTransaction != null &&
                    FeeTransaction.Equals(other.FeeTransaction)
                ) && 
                (
                    TransactionDescription == other.TransactionDescription ||
                    TransactionDescription != null &&
                    TransactionDescription.Equals(other.TransactionDescription)
                ) && 
                (
                    TransactionFeeType == other.TransactionFeeType ||
                    TransactionFeeType != null &&
                    TransactionFeeType.Equals(other.TransactionFeeType)
                ) && 
                (
                    TransactionFeeCharge == other.TransactionFeeCharge ||
                    TransactionFeeCharge != null &&
                    TransactionFeeCharge.Equals(other.TransactionFeeCharge)
                ) && 
                (
                    PaymentOrderProcedureInstanceReference == other.PaymentOrderProcedureInstanceReference ||
                    PaymentOrderProcedureInstanceReference != null &&
                    PaymentOrderProcedureInstanceReference.Equals(other.PaymentOrderProcedureInstanceReference)
                ) && 
                (
                    FeeProjectionsandCommitments == other.FeeProjectionsandCommitments ||
                    FeeProjectionsandCommitments != null &&
                    FeeProjectionsandCommitments.Equals(other.FeeProjectionsandCommitments)
                ) && 
                (
                    ProjectedTransactionDescription == other.ProjectedTransactionDescription ||
                    ProjectedTransactionDescription != null &&
                    ProjectedTransactionDescription.Equals(other.ProjectedTransactionDescription)
                ) && 
                (
                    ProjectedTransactionFeeType == other.ProjectedTransactionFeeType ||
                    ProjectedTransactionFeeType != null &&
                    ProjectedTransactionFeeType.Equals(other.ProjectedTransactionFeeType)
                ) && 
                (
                    ProjectedTransactionFeeCharge == other.ProjectedTransactionFeeCharge ||
                    ProjectedTransactionFeeCharge != null &&
                    ProjectedTransactionFeeCharge.Equals(other.ProjectedTransactionFeeCharge)
                ) && 
                (
                    FeeAccrualAmount == other.FeeAccrualAmount ||
                    FeeAccrualAmount != null &&
                    FeeAccrualAmount.Equals(other.FeeAccrualAmount)
                ) && 
                (
                    AccrualFeeType == other.AccrualFeeType ||
                    AccrualFeeType != null &&
                    AccrualFeeType.Equals(other.AccrualFeeType)
                ) && 
                (
                    AccrualFeeCharge == other.AccrualFeeCharge ||
                    AccrualFeeCharge != null &&
                    AccrualFeeCharge.Equals(other.AccrualFeeCharge)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FeeConfigurationProfile != null)
                    hashCode = hashCode * 59 + FeeConfigurationProfile.GetHashCode();
                    if (FeeDefinition != null)
                    hashCode = hashCode * 59 + FeeDefinition.GetHashCode();
                    if (FeeType != null)
                    hashCode = hashCode * 59 + FeeType.GetHashCode();
                    if (FeeApplicationRecord != null)
                    hashCode = hashCode * 59 + FeeApplicationRecord.GetHashCode();
                    if (FeeTransaction != null)
                    hashCode = hashCode * 59 + FeeTransaction.GetHashCode();
                    if (TransactionDescription != null)
                    hashCode = hashCode * 59 + TransactionDescription.GetHashCode();
                    if (TransactionFeeType != null)
                    hashCode = hashCode * 59 + TransactionFeeType.GetHashCode();
                    if (TransactionFeeCharge != null)
                    hashCode = hashCode * 59 + TransactionFeeCharge.GetHashCode();
                    if (PaymentOrderProcedureInstanceReference != null)
                    hashCode = hashCode * 59 + PaymentOrderProcedureInstanceReference.GetHashCode();
                    if (FeeProjectionsandCommitments != null)
                    hashCode = hashCode * 59 + FeeProjectionsandCommitments.GetHashCode();
                    if (ProjectedTransactionDescription != null)
                    hashCode = hashCode * 59 + ProjectedTransactionDescription.GetHashCode();
                    if (ProjectedTransactionFeeType != null)
                    hashCode = hashCode * 59 + ProjectedTransactionFeeType.GetHashCode();
                    if (ProjectedTransactionFeeCharge != null)
                    hashCode = hashCode * 59 + ProjectedTransactionFeeCharge.GetHashCode();
                    if (FeeAccrualAmount != null)
                    hashCode = hashCode * 59 + FeeAccrualAmount.GetHashCode();
                    if (AccrualFeeType != null)
                    hashCode = hashCode * 59 + AccrualFeeType.GetHashCode();
                    if (AccrualFeeCharge != null)
                    hashCode = hashCode * 59 + AccrualFeeCharge.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ServiceFees left, ServiceFees right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ServiceFees left, ServiceFees right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
